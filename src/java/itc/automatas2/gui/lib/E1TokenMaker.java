/* The following code was generated by JFlex 1.4.1 on 4/20/18 9:00 PM */

package itc.automatas2.gui.lib;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/20/18 9:00 PM from the specification file
 * <tt>C:/Users/janoc/Documents/Tecno/S8 ISC/LA2/CompiladorPrototipo/src/main/java/itc/automatas2/gui/lib/E1TokenMaker.flex</tt>
 */
public class E1TokenMaker extends AbstractJFlexCTokenMaker {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\2\1\1\1\0\2\13\22\0\1\2\1\43\1\37\1\4" +
                    "\1\10\2\13\1\34\2\45\1\42\1\41\1\46\1\26\1\32\1\3" +
                    "\1\25\11\11\1\40\1\46\1\43\1\44\1\43\1\13\1\12\3\24" +
                    "\1\31\1\27\1\31\5\10\1\23\1\30\7\10\1\7\2\10\1\10" +
                    "\2\10\1\45\1\5\1\45\1\13\1\10\1\0\1\20\1\35\1\54" +
                    "\1\57\1\16\1\17\1\55\1\51\1\47\2\10\1\21\1\30\1\53" +
                    "\1\52\1\56\1\10\1\15\1\22\1\14\1\6\1\33\1\50\1\36" +
                    "\2\10\1\45\1\13\1\45\1\13\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\2\1\5\6\1\4\1\1\1\6\1\10\4\4\1\11" +
                    "\5\6\1\5\1\12\1\7\1\12\1\13\1\7\1\0" +
                    "\7\6\1\13\1\6\2\10\1\14\1\0\2\15\3\6" +
                    "\1\7\1\13\1\0\10\6\1\10\1\16\3\10\1\17" +
                    "\3\6\1\20\1\6\1\21\1\6\2\10\3\6\2\10" +
                    "\1\21\1\10\1\6";

    private static int[] zzUnpackAction() {
        int[] result = new int[88];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150" +
                    "\0\u0180\0\140\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0" +
                    "\0\u02d0\0\u0300\0\u0330\0\140\0\u0360\0\u0390\0\u03c0\0\140" +
                    "\0\140\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510" +
                    "\0\u0540\0\u04e0\0\u0570\0\u02d0\0\u05a0\0\u05d0\0\u0600\0\u0630" +
                    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\140" +
                    "\0\u03c0\0\u0120\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u04e0\0\u0870" +
                    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0" +
                    "\0\u0a20\0\u0a50\0\140\0\u0a80\0\u0ab0\0\u0ae0\0\u0120\0\u0b10" +
                    "\0\u0b40\0\u0b70\0\u0120\0\u0ba0\0\u0120\0\u0bd0\0\u0c00\0\u0c30" +
                    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[88];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\2\3\7\1\10" +
                    "\1\11\1\12\1\13\1\14\1\15\1\16\2\7\1\17" +
                    "\2\7\1\10\1\20\3\7\1\21\1\7\1\12\1\22" +
                    "\1\7\1\23\1\24\1\25\1\26\2\27\1\30\1\31" +
                    "\1\32\1\33\2\7\1\34\2\7\1\35\1\7\1\2" +
                    "\3\0\7\2\1\0\12\2\1\0\3\2\1\0\1\2" +
                    "\1\0\2\2\10\0\11\2\62\0\1\4\60\0\1\6" +
                    "\40\0\1\24\13\0\3\36\1\0\54\36\1\2\3\0" +
                    "\2\2\4\7\1\2\1\0\12\7\1\0\3\7\1\0" +
                    "\1\7\1\0\2\7\10\0\11\7\1\37\3\0\2\37" +
                    "\2\40\1\37\1\10\1\37\1\0\2\37\1\41\1\42" +
                    "\1\37\1\43\1\37\1\43\1\37\1\10\1\0\1\41" +
                    "\2\42\1\44\1\37\1\0\2\37\10\0\10\37\1\42" +
                    "\1\2\3\0\2\2\3\7\2\2\1\0\11\7\1\2" +
                    "\1\0\3\7\1\0\1\7\1\0\2\7\10\0\11\7" +
                    "\1\2\3\0\2\2\4\7\1\2\1\0\1\7\1\45" +
                    "\10\7\1\0\3\7\1\0\1\7\1\0\2\7\10\0" +
                    "\11\7\1\2\3\0\2\2\4\7\1\2\1\0\2\7" +
                    "\1\46\7\7\1\0\3\7\1\0\1\7\1\0\2\7" +
                    "\10\0\11\7\1\2\3\0\2\2\4\7\1\2\1\0" +
                    "\5\7\1\47\4\7\1\0\3\7\1\0\1\7\1\0" +
                    "\2\7\10\0\11\7\1\2\3\0\2\2\1\50\3\7" +
                    "\1\2\1\0\4\7\1\51\5\7\1\0\3\7\1\0" +
                    "\1\7\1\0\2\7\10\0\3\7\1\52\5\7\1\2" +
                    "\3\0\2\2\4\7\1\2\1\0\1\53\11\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\11\7\26\0" +
                    "\1\24\15\0\1\24\24\0\1\54\13\0\1\54\32\0" +
                    "\1\2\3\0\2\2\4\7\1\2\1\0\12\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\3\7\1\55" +
                    "\5\7\1\23\1\56\3\23\1\57\31\23\1\60\20\23" +
                    "\41\0\1\24\2\0\1\24\55\0\1\61\1\0\1\24" +
                    "\57\0\1\24\13\0\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\3\7\1\62\6\7\1\0\3\7\1\0\1\7" +
                    "\1\0\2\7\10\0\4\7\1\63\4\7\1\2\3\0" +
                    "\2\2\4\7\1\2\1\0\12\7\1\0\3\7\1\0" +
                    "\1\7\1\0\2\7\10\0\2\7\1\64\6\7\1\2" +
                    "\3\0\2\2\1\65\3\7\1\2\1\0\12\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\11\7\1\2" +
                    "\3\0\2\2\4\7\1\2\1\0\1\7\1\66\10\7" +
                    "\1\0\3\7\1\0\1\7\1\0\2\7\10\0\11\7" +
                    "\1\36\1\0\56\36\1\37\3\0\7\37\1\0\12\37" +
                    "\1\0\3\37\1\0\1\37\1\0\2\37\10\0\12\37" +
                    "\3\0\7\37\1\0\5\37\1\67\1\37\1\67\2\37" +
                    "\1\0\3\37\1\0\1\37\1\0\2\37\10\0\12\37" +
                    "\3\0\5\37\1\70\1\37\1\0\11\37\1\70\1\71" +
                    "\3\37\1\0\1\37\1\0\2\37\2\0\1\71\5\0" +
                    "\12\37\3\0\2\37\2\67\3\37\1\0\12\37\1\0" +
                    "\3\37\1\0\1\37\1\0\2\37\10\0\11\37\1\2" +
                    "\3\0\2\2\1\72\3\7\1\2\1\0\12\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\11\7\1\2" +
                    "\3\0\2\2\4\7\1\2\1\0\1\73\3\7\1\74" +
                    "\5\7\1\0\3\7\1\0\1\7\1\0\2\7\10\0" +
                    "\11\7\1\2\3\0\2\2\4\7\1\2\1\0\6\7" +
                    "\1\75\3\7\1\0\3\7\1\0\1\7\1\0\2\7" +
                    "\10\0\11\7\1\2\3\0\2\2\4\7\1\2\1\0" +
                    "\12\7\1\0\3\7\1\0\1\7\1\0\2\7\10\0" +
                    "\4\7\1\76\4\7\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\5\7\1\77\4\7\1\0\3\7\1\0\1\7" +
                    "\1\0\2\7\10\0\11\7\1\2\3\0\2\2\4\7" +
                    "\1\2\1\0\1\7\1\62\10\7\1\0\3\7\1\0" +
                    "\1\7\1\0\2\7\10\0\11\7\1\2\3\0\2\2" +
                    "\4\7\1\2\1\0\1\7\1\100\10\7\1\0\3\7" +
                    "\1\0\1\7\1\0\2\7\10\0\11\7\1\37\3\0" +
                    "\5\37\1\54\1\37\1\0\2\37\1\41\1\42\5\37" +
                    "\1\54\1\0\1\41\2\42\1\0\1\37\1\0\2\37" +
                    "\10\0\10\37\1\42\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\12\7\1\0\3\7\1\0\1\7\1\0\2\7" +
                    "\10\0\3\7\1\101\5\7\5\56\1\102\31\56\1\103" +
                    "\21\56\1\0\3\56\1\23\1\104\1\105\4\56\2\23" +
                    "\1\56\2\23\4\56\1\23\5\56\3\23\1\106\1\23" +
                    "\13\56\1\23\4\56\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\1\107\11\7\1\0\3\7\1\0\1\7\1\0" +
                    "\2\7\10\0\11\7\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\12\7\1\0\3\7\1\0\1\7\1\0\2\7" +
                    "\10\0\1\110\10\7\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\5\7\1\111\4\7\1\0\3\7\1\0\1\7" +
                    "\1\0\2\7\10\0\11\7\1\2\3\0\2\2\4\7" +
                    "\1\2\1\0\12\7\1\0\3\7\1\0\1\7\1\0" +
                    "\2\7\10\0\1\112\10\7\1\37\3\0\5\37\1\70" +
                    "\1\37\1\0\3\37\1\42\5\37\1\70\1\0\1\37" +
                    "\2\42\1\0\1\37\1\0\2\37\10\0\10\37\1\42" +
                    "\11\0\1\70\13\0\1\70\32\0\1\2\3\0\2\2" +
                    "\4\7\1\2\1\0\2\7\1\113\7\7\1\0\3\7" +
                    "\1\0\1\7\1\0\2\7\10\0\11\7\1\2\3\0" +
                    "\2\2\1\114\3\7\1\2\1\0\12\7\1\0\3\7" +
                    "\1\0\1\7\1\0\2\7\10\0\11\7\1\2\3\0" +
                    "\2\2\4\7\1\2\1\0\5\7\1\107\4\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\10\7\1\115" +
                    "\1\2\3\0\2\2\4\7\1\2\1\0\2\7\1\62" +
                    "\7\7\1\0\3\7\1\0\1\7\1\0\2\7\10\0" +
                    "\11\7\1\2\3\0\2\2\4\7\1\2\1\0\12\7" +
                    "\1\0\3\7\1\0\1\7\1\0\2\7\10\0\5\7" +
                    "\1\62\3\7\1\2\3\0\2\2\4\7\1\2\1\0" +
                    "\6\7\1\72\3\7\1\0\3\7\1\0\1\7\1\0" +
                    "\2\7\10\0\11\7\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\12\7\1\0\3\7\1\0\1\7\1\0\2\7" +
                    "\10\0\1\116\10\7\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\5\7\1\107\4\7\1\0\3\7\1\0\1\7" +
                    "\1\0\2\7\10\0\11\7\1\56\1\0\63\56\1\102" +
                    "\3\56\1\117\4\56\3\117\3\56\2\117\1\56\1\117" +
                    "\1\56\1\117\3\56\1\117\1\56\1\103\14\56\1\117" +
                    "\2\56\1\117\5\56\1\102\3\56\1\120\4\56\3\120" +
                    "\3\56\2\120\1\56\1\120\1\56\1\120\3\56\1\120" +
                    "\1\56\1\103\14\56\1\120\2\56\1\120\5\56\1\102" +
                    "\3\56\1\23\4\56\3\23\3\56\2\23\1\56\1\23" +
                    "\1\56\1\23\3\56\1\23\1\56\1\103\14\56\1\23" +
                    "\2\56\1\23\1\2\3\0\2\2\4\7\1\2\1\0" +
                    "\5\7\1\75\4\7\1\0\3\7\1\0\1\7\1\0" +
                    "\2\7\10\0\11\7\1\2\3\0\2\2\4\7\1\2" +
                    "\1\0\5\7\1\62\4\7\1\0\3\7\1\0\1\7" +
                    "\1\0\2\7\10\0\11\7\1\2\3\0\2\2\4\7" +
                    "\1\2\1\0\12\7\1\0\3\7\1\0\1\7\1\0" +
                    "\2\7\10\0\4\7\1\121\4\7\1\2\3\0\2\2" +
                    "\4\7\1\2\1\0\1\7\1\122\10\7\1\0\3\7" +
                    "\1\0\1\7\1\0\2\7\10\0\11\7\1\2\3\0" +
                    "\2\2\4\7\1\2\1\0\12\7\1\0\3\7\1\0" +
                    "\1\7\1\0\2\7\10\0\4\7\1\123\4\7\5\56" +
                    "\1\102\3\56\1\124\4\56\3\124\3\56\2\124\1\56" +
                    "\1\124\1\56\1\124\3\56\1\124\1\56\1\103\14\56" +
                    "\1\124\2\56\1\124\5\56\1\102\3\56\1\125\4\56" +
                    "\3\125\3\56\2\125\1\56\1\125\1\56\1\125\3\56" +
                    "\1\125\1\56\1\103\14\56\1\125\2\56\1\125\1\2" +
                    "\3\0\2\2\4\7\1\2\1\0\1\126\11\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\11\7\1\2" +
                    "\3\0\2\2\4\7\1\2\1\0\12\7\1\0\3\7" +
                    "\1\0\1\7\1\0\2\7\10\0\4\7\1\62\4\7" +
                    "\1\2\3\0\2\2\4\7\1\2\1\0\12\7\1\0" +
                    "\3\7\1\0\1\7\1\0\2\7\10\0\6\7\1\107" +
                    "\2\7\5\56\1\102\3\56\1\106\4\56\3\106\3\56" +
                    "\2\106\1\56\1\106\1\56\1\106\3\56\1\106\1\56" +
                    "\1\103\14\56\1\106\2\56\1\106\5\56\1\102\3\56" +
                    "\1\127\4\56\3\127\3\56\2\127\1\56\1\127\1\56" +
                    "\1\127\3\56\1\127\1\56\1\103\14\56\1\127\2\56" +
                    "\1\127\1\2\3\0\2\2\4\7\1\2\1\0\5\7" +
                    "\1\130\4\7\1\0\3\7\1\0\1\7\1\0\2\7" +
                    "\10\0\11\7\5\56\1\102\3\56\1\104\4\56\3\104" +
                    "\3\56\2\104\1\56\1\104\1\56\1\104\3\56\1\104" +
                    "\1\56\1\103\14\56\1\104\2\56\1\104\1\2\3\0" +
                    "\2\2\4\7\1\2\1\0\12\7\1\0\3\7\1\0" +
                    "\1\7\1\0\2\7\10\0\4\7\1\115\4\7";

    private static int[] zzUnpackTrans() {
        int[] result = new int[3552];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\1\1\11\6\1\1\11\11\1\1\11\3\1" +
                    "\2\11\12\1\1\0\13\1\1\11\1\0\7\1\1\0" +
                    "\11\1\1\11\25\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[88];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */


    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public E1TokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array       The character array.
     * @param start       The starting offset in the array.
     * @param end         The ending offset in the array.
     * @param tokenType   The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[]{"//", null};
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text             The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset      The offset into the document at which
     *                         <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     * the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }


    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }


    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public E1TokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public E1TokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 152) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 13: {
                    addToken(Token.RESERVED_WORD);
                }
                case 18:
                    break;
                case 6: {
                    addToken(Token.IDENTIFIER);
                }
                case 19:
                    break;
                case 17: {
                    addToken(Token.FUNCTION);
                }
                case 20:
                    break;
                case 12: {
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 21:
                    break;
                case 11: {
                    addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 22:
                    break;
                case 5: {
                    addToken(Token.COMMENT_EOL);
                    addNullToken();
                    return firstToken;
                }
                case 23:
                    break;
                case 3: {
                    addToken(Token.WHITESPACE);
                }
                case 24:
                    break;
                case 15: {
                    addToken(Token.DATA_TYPE);
                }
                case 25:
                    break;
                case 10: {
                    addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 26:
                    break;
                case 1: {
                    addToken(Token.ERROR_IDENTIFIER);
                }
                case 27:
                    break;
                case 4: {
                    addToken(Token.OPERATOR);
                }
                case 28:
                    break;
                case 7: {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 29:
                    break;
                case 16: {
                    addToken(Token.LITERAL_BOOLEAN);
                }
                case 30:
                    break;
                case 8: {
                    addToken(Token.ERROR_STRING_DOUBLE);
                    addNullToken();
                    return firstToken;
                }
                case 31:
                    break;
                case 2: {
                    addNullToken();
                    return firstToken;
                }
                case 32:
                    break;
                case 14: {
                    addToken(Token.ERROR_STRING_DOUBLE);
                }
                case 33:
                    break;
                case 9: {
                    addToken(Token.SEPARATOR);
                }
                case 34:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken();
                                return firstToken;
                            }
                            case 89:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
